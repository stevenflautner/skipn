package kotlinx.html

import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class LABEL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("label", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {
    var form : String
        get()  = attributeStringString.get(this, "form")
        set(newValue) {attributeStringString.set(this, "form", newValue)}

    var htmlFor : String
        get()  = attributeStringString.get(this, "for")
        set(newValue) {attributeStringString.set(this, "for", newValue)}


}
val LABEL.asFlowContent : FlowContent
    get()  = this

val LABEL.asInteractiveContent : InteractiveContent
    get()  = this

val LABEL.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class LEGEND(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("legend", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val LEGEND.asFlowContent : FlowContent
    get()  = this

val LEGEND.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class LI(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("li", consumer, initialAttributes, null, false, false), HtmlBlockTag {
    var value : String
        get()  = attributeStringString.get(this, "value")
        set(newValue) {attributeStringString.set(this, "value", newValue)}


}

@Suppress("unused")
open class LINK(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("link", consumer, initialAttributes, null, false, true), CommonAttributeGroupFacadeFlowMetaDataPhrasingContent {
    var href : String
        get()  = attributeStringString.get(this, "href")
        set(newValue) {attributeStringString.set(this, "href", newValue)}

    var hrefLang : String
        get()  = attributeStringString.get(this, "hreflang")
        set(newValue) {attributeStringString.set(this, "hreflang", newValue)}

    var rel : String
        get()  = attributeStringString.get(this, "rel")
        set(newValue) {attributeStringString.set(this, "rel", newValue)}

    var media : String
        get()  = attributeStringString.get(this, "media")
        set(newValue) {attributeStringString.set(this, "media", newValue)}

    var type : String
        get()  = attributeStringString.get(this, "type")
        set(newValue) {attributeStringString.set(this, "type", newValue)}

    var sizes : String
        get()  = attributeStringString.get(this, "sizes")
        set(newValue) {attributeStringString.set(this, "sizes", newValue)}

    var integrity : String
        get()  = attributeStringString.get(this, "integrity")
        set(newValue) {attributeStringString.set(this, "integrity", newValue)}


}
val LINK.asFlowContent : FlowContent
    get()  = this

val LINK.asMetaDataContent : MetaDataContent
    get()  = this

val LINK.asPhrasingContent : PhrasingContent
    get()  = this


