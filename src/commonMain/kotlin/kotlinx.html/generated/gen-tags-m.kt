package kotlinx.html

import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class MAIN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("main", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowPhrasingSectioningContent {

}

@Suppress("unused")
open class MAP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("map", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {
    var name : String
        get()  = attributeStringString.get(this, "name")
        set(newValue) {attributeStringString.set(this, "name", newValue)}


}
val MAP.asFlowContent : FlowContent
    get()  = this

val MAP.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class MARK(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("mark", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val MARK.asFlowContent : FlowContent
    get()  = this

val MARK.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class MATH(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("math", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {

}
val MATH.asFlowContent : FlowContent
    get()  = this

val MATH.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class MATHML(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("mathml", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {

}

@Suppress("unused")
open class META(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("meta", consumer, initialAttributes, null, false, true), CommonAttributeGroupFacadeFlowMetaDataPhrasingContent {
    var httpEquiv : String
        get()  = attributeStringString.get(this, "http-equiv")
        set(newValue) {attributeStringString.set(this, "http-equiv", newValue)}

    var name : String
        get()  = attributeStringString.get(this, "name")
        set(newValue) {attributeStringString.set(this, "name", newValue)}

    var content : String
        get()  = attributeStringString.get(this, "content")
        set(newValue) {attributeStringString.set(this, "content", newValue)}

    var charset : String
        get()  = attributeStringString.get(this, "charset")
        set(newValue) {attributeStringString.set(this, "charset", newValue)}


}
val META.asFlowContent : FlowContent
    get()  = this

val META.asMetaDataContent : MetaDataContent
    get()  = this

val META.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class METER(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("meter", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {
    var value : String
        get()  = attributeStringString.get(this, "value")
        set(newValue) {attributeStringString.set(this, "value", newValue)}

    var min : String
        get()  = attributeStringString.get(this, "min")
        set(newValue) {attributeStringString.set(this, "min", newValue)}

    var max : String
        get()  = attributeStringString.get(this, "max")
        set(newValue) {attributeStringString.set(this, "max", newValue)}

    var low : String
        get()  = attributeStringString.get(this, "low")
        set(newValue) {attributeStringString.set(this, "low", newValue)}

    var high : String
        get()  = attributeStringString.get(this, "high")
        set(newValue) {attributeStringString.set(this, "high", newValue)}

    var optimum : String
        get()  = attributeStringString.get(this, "optimum")
        set(newValue) {attributeStringString.set(this, "optimum", newValue)}


}
val METER.asFlowContent : FlowContent
    get()  = this

val METER.asPhrasingContent : PhrasingContent
    get()  = this


